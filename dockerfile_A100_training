ARG CUDA_VERSION=11.7.1
ARG OS_VERSION=20.04

FROM nvidia/cuda:${CUDA_VERSION}-cudnn8-devel-ubuntu${OS_VERSION}

ENV DEBIAN_FRONTEND=noninteractive

# # Install requried libraries
RUN apt-get update && apt-get install -y --no-install-recommends \
    libcurl4-openssl-dev \
    wget \
    git \
    pkg-config \
    sudo \
    ssh \
    libssl-dev \
    pbzip2 \
    pv \
    bzip2 \
    unzip \
    build-essential

# Install python3
RUN apt-get install -y --no-install-recommends \
      python3 \
      python3-pip \
      python3-dev \
      python3-wheel &&\
    cd /usr/local/bin &&\
    ln -s /usr/bin/python3 python &&\
    ln -s /usr/bin/pip3 pip;

# # Install TensorRT
# RUN if [ "${CUDA_VERSION}" = "10.2" ] ; then \
#     v="${TRT_VERSION%.*}-1+cuda${CUDA_VERSION}" &&\
#     apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub &&\
#     apt-get update &&\
#     sudo apt-get install libnvinfer8=${v} libnvonnxparsers8=${v} libnvparsers8=${v} libnvinfer-plugin8=${v} \
#         libnvinfer-dev=${v} libnvonnxparsers-dev=${v} libnvparsers-dev=${v} libnvinfer-plugin-dev=${v} \
#         python3-libnvinfer=${v}; \
# else \
#     v="${TRT_VERSION%.*}-1+cuda${CUDA_VERSION%.*}" &&\
#     apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub &&\
#     apt-get update &&\
#     sudo apt-get install libnvinfer8=${v} libnvonnxparsers8=${v} libnvparsers8=${v} libnvinfer-plugin8=${v} \
#         libnvinfer-dev=${v} libnvonnxparsers-dev=${v} libnvparsers-dev=${v} libnvinfer-plugin-dev=${v} \
#         python3-libnvinfer=${v}; \
# fi

# # Install PyPI packages
# RUN pip3 install --upgrade pip
# RUN pip3 install setuptools>=41.0.0

# # Install Cmake
# RUN cd /tmp && \
#     wget https://cmake.org/files/v3.14/cmake-3.14.4-Linux-x86_64.sh && \
#     chmod +x cmake-3.14.4-Linux-x86_64.sh && \
#     ./cmake-3.14.4-Linux-x86_64.sh --prefix=/usr/local --exclude-subdir --skip-license && \
#     rm ./cmake-3.14.4-Linux-x86_64.sh

# # Download NGC client
# RUN cd /usr/local/bin && wget https://ngc.nvidia.com/downloads/ngccli_cat_linux.zip && unzip ngccli_cat_linux.zip && chmod u+x ngc-cli/ngc && rm ngccli_cat_linux.zip ngc-cli.md5 && echo "no-apikey\nascii\n" | ngc-cli/ngc config set

# Install PyTorch
RUN pip install torch==1.13.1+cu117 torchvision==0.14.1+cu117 torchaudio==0.13.1 --extra-index-url https://download.pytorch.org/whl/cu117

COPY requirements.txt /tmp/requirements.txt
RUN pip3 install -r /tmp/requirements.txt


# Install MMLab
ARG TORCH_CUDA_ARCH_LIST="7.5;6.1;8.0;8.6"
ENV FORCE_CUDA="1"

RUN cd / && \
    git clone https://github.com/open-mmlab/mmcv.git && \
    cd mmcv && git checkout v1.6.2 && \
    pip3 install -r requirements/optional.txt && \
    MMCV_WITH_OPS=1 pip3 install -e .

RUN cd / && \
    git clone https://github.com/open-mmlab/mmdetection.git && \
    cd mmdetection && git checkout v2.25.3 && \
    pip3 install -v -e .

RUN sudo apt-get install -y libgl1-mesa-glx

# # Set environment and working directory
# ENV TRT_LIBPATH /usr/lib/x86_64-linux-gnu
# ENV PATH="${PATH}:/usr/local/bin/ngc-cli"
# ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${TRT_OSSPATH}/build/out:${TRT_LIBPATH}"
# WORKDIR /workspace